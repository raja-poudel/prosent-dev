"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./src/__fake-api__/chat-api.js":
/*!**************************************!*\
  !*** ./src/__fake-api__/chat-api.js ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"chatApi\": function() { return /* binding */ chatApi; }\n/* harmony export */ });\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/esm/index.js\");\n/* harmony import */ var _utils_create_resource_id__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/create-resource-id */ \"./src/utils/create-resource-id.js\");\n/* harmony import */ var _utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/deep-copy */ \"./src/utils/deep-copy.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n\n\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nvar now = new Date();\nvar contacts = [\n    {\n        id: '5e8891ab188cd2855e6029b7',\n        avatar: '/assests/mock-images/avatars/avatar-alcides_antonio.png',\n        isActive: true,\n        lastActivity: now.getTime(),\n        name: 'Alcides Antonio'\n    },\n    {\n        id: '5e887a62195cc5aef7e8ca5d',\n        avatar: '/assests/mock-images/avatars/avatar-marcus_finn.png',\n        isActive: false,\n        lastActivity: (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.subHours)(now, 2).getTime(),\n        name: 'Marcus Finn'\n    },\n    {\n        id: '5e887ac47eed253091be10cb',\n        avatar: '/assests/mock-images/avatars/avatar-carson_darrin.png',\n        isActive: false,\n        lastActivity: (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.subMinutes)(now, 15).getTime(),\n        name: 'Carson Darrin'\n    },\n    {\n        id: '5e887b209c28ac3dd97f6db5',\n        avatar: '/assests/mock-images/avatars/avatar-fran_perez.png',\n        isActive: true,\n        lastActivity: now.getTime(),\n        name: 'Fran Perez'\n    },\n    {\n        id: '5e887b7602bdbc4dbb234b27',\n        avatar: '/assests/mock-images/avatars/avatar-jie_yan_song.png',\n        isActive: true,\n        lastActivity: now.getTime(),\n        name: 'Jie Yan Song'\n    },\n    {\n        id: '5e86805e2bafd54f66cc95c3',\n        avatar: '/assests/mock-images/avatars/avatar-miron_vitold.png',\n        isActive: false,\n        lastActivity: (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.subHours)(now, 1).getTime(),\n        name: 'Miron Vitold'\n    },\n    {\n        id: '5e887a1fbefd7938eea9c981',\n        avatar: '/assests/mock-images/avatars/avatar-penjani_inyene.png',\n        isActive: false,\n        lastActivity: (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.subHours)(now, 6).getTime(),\n        name: 'Penjani Inyene'\n    },\n    {\n        id: '5e887d0b3d090c1b8f162003',\n        avatar: '/assests/mock-images/avatars/avatar-omar_darboe.png',\n        isActive: true,\n        lastActivity: now.getTime(),\n        name: 'Omar Darobe'\n    },\n    {\n        id: '5e88792be2d4cfb4bf0971d9',\n        avatar: '/assests/mock-images/avatars/avatar-siegbert_gottfried.png',\n        isActive: true,\n        lastActivity: now.getTime(),\n        name: 'Siegbert Gottfried'\n    },\n    {\n        id: '5e8877da9a65442b11551975',\n        avatar: '/assests/mock-images/avatars/avatar-iulia_albu.png',\n        isActive: true,\n        lastActivity: now.getTime(),\n        name: 'Iulia Albu'\n    },\n    {\n        id: '5e8680e60cba5019c5ca6fda',\n        avatar: '/assests/mock-images/avatars/avatar-nasimiyu_danai.png',\n        isActive: true,\n        lastActivity: now.getTime(),\n        name: 'Nasimiyu Danai'\n    }\n];\nvar threads = [\n    {\n        id: '5e867eb9de721aecaccf4f7b',\n        messages: [\n            {\n                id: '5e867f0a5bc0ff2bfa07bfa6',\n                attachments: [],\n                body: 'Hey, nice projects! I really liked the one in react. What\\'s your quote on kinda similar project?',\n                contentType: 'text',\n                createdAt: (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.subDays)((0,date_fns__WEBPACK_IMPORTED_MODULE_2__.subHours)(now, 10), 4).getTime(),\n                authorId: '5e86805e2bafd54f66cc95c3'\n            },\n            {\n                id: '5e867f167d5f78109ae9f2a4',\n                attachments: [],\n                body: 'I would need to know more details, but my hourly rate stats at $35/hour. Thanks!',\n                contentType: 'text',\n                createdAt: (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.subDays)((0,date_fns__WEBPACK_IMPORTED_MODULE_2__.subHours)(now, 2), 4).getTime(),\n                authorId: '5e86809283e28b96d2d38537'\n            },\n            {\n                id: '5e867f1c9ca72084693528f4',\n                attachments: [],\n                body: 'Well it\\'s a really easy one, I\\'m sure we can make it half of the price.',\n                contentType: 'text',\n                createdAt: (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.subHours)(now, 5).getTime(),\n                authorId: '5e86805e2bafd54f66cc95c3'\n            },\n            {\n                id: '5e867f22fd2e27a09849b4db',\n                attachments: [],\n                body: 'Then why don\\'t you make it if it\\'s that easy? Sorry I\\'m not interetes, have fantastic day Adam!',\n                contentType: 'text',\n                createdAt: (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.subHours)(now, 3).getTime(),\n                authorId: '5e86809283e28b96d2d38537'\n            },\n            {\n                id: '5e867f28a34d45ac6eb5c41f',\n                attachments: [],\n                body: 'Last offer, $25 per hour',\n                contentType: 'text',\n                createdAt: (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.subHours)(now, 2).getTime(),\n                authorId: '5e86805e2bafd54f66cc95c3'\n            },\n            {\n                id: '5e867f2dba984a3f78b33526',\n                attachments: [],\n                body: '/assests/mock-images/chat/media_1.png',\n                contentType: 'image',\n                createdAt: (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.subHours)(now, 1).getTime(),\n                authorId: '5e86805e2bafd54f66cc95c3'\n            }\n        ],\n        participantIds: [\n            '5e86809283e28b96d2d38537',\n            '5e86805e2bafd54f66cc95c3'\n        ],\n        type: 'ONE_TO_ONE',\n        unreadCount: 2\n    },\n    {\n        id: '5e867fa7082c3c5921403a26',\n        messages: [\n            {\n                id: '5e867fc180837d901bd9bca1',\n                attachments: [],\n                body: 'Hey, would you like to collaborate?',\n                contentType: 'text',\n                createdAt: (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.subDays)((0,date_fns__WEBPACK_IMPORTED_MODULE_2__.subMinutes)(now, 6), 3).getTime(),\n                authorId: '5e8680e60cba5019c5ca6fda'\n            },\n            {\n                id: '5e8d6fb695df7971237fc173',\n                attachments: [],\n                body: 'Hi, Merrile!',\n                contentType: 'text',\n                createdAt: (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.subDays)((0,date_fns__WEBPACK_IMPORTED_MODULE_2__.subMinutes)(now, 5), 3).getTime(),\n                authorId: '5e86809283e28b96d2d38537'\n            },\n            {\n                id: '58825a290eb4d4271a54f188',\n                attachments: [],\n                body: 'Hello everyone 😀',\n                contentType: 'text',\n                createdAt: (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.subDays)((0,date_fns__WEBPACK_IMPORTED_MODULE_2__.subMinutes)(now, 2), 1).getTime(),\n                authorId: '5e8891ab188cd2855e6029b7'\n            }\n        ],\n        participantIds: [\n            '5e86809283e28b96d2d38537',\n            '5e8680e60cba5019c5ca6fda',\n            '5e8891ab188cd2855e6029b7'\n        ],\n        type: 'GROUP',\n        unreadCount: 0\n    }\n];\nvar findThreadById = function(threadId) {\n    return threads.find(function(_threadId) {\n        return _threadId.id === threadId;\n    });\n};\nvar findThreadByParticipantIds = function(participantIds) {\n    var thread = threads.find(function(_thread) {\n        if (_thread.participantIds.length !== participantIds.length) {\n            return false;\n        }\n        var foundParticipantIds = new Set();\n        _thread.participantIds.forEach(function(participantId) {\n            if (participantIds.includes(participantId)) {\n                foundParticipantIds.add(participantId);\n            }\n        });\n        return foundParticipantIds.size === participantIds.length;\n    });\n    return thread;\n};\nvar ChatApi = /*#__PURE__*/ function() {\n    \"use strict\";\n    function ChatApi() {\n        _classCallCheck(this, ChatApi);\n    }\n    _createClass(ChatApi, [\n        {\n            key: \"getContacts\",\n            value: function getContacts(query) {\n                return new Promise(function(resolve, reject) {\n                    try {\n                        var foundContacts = contacts;\n                        if (query) {\n                            var cleanQuery = query.toLowerCase().trim();\n                            foundContacts = foundContacts.filter(function(contact) {\n                                return contact.name.toLowerCase().includes(cleanQuery);\n                            });\n                        }\n                        resolve((0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(foundContacts));\n                    } catch (err) {\n                        console.error('[Chat Api]: ', err);\n                        reject(new Error('Internal server error'));\n                    }\n                });\n            }\n        },\n        {\n            key: \"getThreads\",\n            value: function getThreads() {\n                // On server get current identity (user) from the request\n                var user = {\n                    id: '5e86809283e28b96d2d38537',\n                    avatar: '/assests/mock-images/avatars/avatar-anika_visser.png',\n                    name: 'Anika Visser'\n                };\n                var expandedThreads = threads.map(function(thread) {\n                    var participants = [\n                        user\n                    ];\n                    contacts.forEach(function(contact) {\n                        if (thread.participantIds.includes(contact.id)) {\n                            participants.push({\n                                id: contact.id,\n                                avatar: contact.avatar,\n                                lastActivity: contact.lastActivity,\n                                name: contact.name\n                            });\n                        }\n                    });\n                    return _objectSpread({}, thread, {\n                        participants: participants\n                    });\n                });\n                return Promise.resolve((0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(expandedThreads));\n            }\n        },\n        {\n            key: \"getThread\",\n            value: function getThread(threadKey) {\n                return new Promise(function(resolve, reject) {\n                    if (!threadKey) {\n                        reject(new Error('Thread key is required'));\n                        return;\n                    }\n                    try {\n                        // On server get current identity (user) from the request\n                        var user = {\n                            id: '5e86809283e28b96d2d38537',\n                            avatar: '/assests/mock-images/avatars/avatar-anika_visser.png',\n                            name: 'Anika Visser'\n                        };\n                        var thread;\n                        // Thread key might be a contact ID\n                        var contact1 = contacts.find(function(contact) {\n                            return contact.id === threadKey;\n                        });\n                        if (contact1) {\n                            thread = findThreadByParticipantIds([\n                                user.id,\n                                contact1.id\n                            ]);\n                        }\n                        // Thread key might be a thread ID\n                        if (!thread) {\n                            thread = findThreadById(threadKey);\n                        }\n                        // If reached this point and thread does not exist this could mean:\n                        // b) The thread key is a contact ID, but no thread found\n                        // a) The thread key is a thread ID and is invalid\n                        if (!thread) {\n                            return resolve(null);\n                        }\n                        var participants = [\n                            user\n                        ];\n                        contacts.forEach(function(contact) {\n                            if (thread.participantIds.includes(contact.id)) {\n                                participants.push({\n                                    id: contact.id,\n                                    avatar: contact.avatar,\n                                    lastActivity: contact.lastActivity,\n                                    name: contact.name\n                                });\n                            }\n                        });\n                        var expandedThread = _objectSpread({}, thread, {\n                            participants: participants\n                        });\n                        resolve((0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(expandedThread));\n                    } catch (err) {\n                        console.error('[Chat Api]: ', err);\n                        reject(new Error('Internal server error'));\n                    }\n                });\n            }\n        },\n        {\n            key: \"markThreadAsSeen\",\n            value: function markThreadAsSeen(threadId) {\n                return new Promise(function(resolve, reject) {\n                    try {\n                        var thread = threads.find(function(_thread) {\n                            return _thread.id === threadId;\n                        });\n                        if (thread) {\n                            thread.unreadCount = 0;\n                        }\n                        resolve(true);\n                    } catch (err) {\n                        console.error('[Chat Api]: ', err);\n                        reject(new Error('Internal server error'));\n                    }\n                });\n            }\n        },\n        {\n            key: \"getParticipants\",\n            value: function getParticipants(threadKey) {\n                return new Promise(function(resolve, reject) {\n                    try {\n                        // On server get current identity (user) from the request\n                        var user = {\n                            id: '5e86809283e28b96d2d38537',\n                            avatar: '/assests/mock-images/avatars/avatar-anika_visser.png',\n                            name: 'Anika Visser'\n                        };\n                        var participants = [\n                            user\n                        ];\n                        // Thread key might be a thread ID\n                        var thread = findThreadById(threadKey);\n                        if (thread) {\n                            contacts.forEach(function(contact) {\n                                if (thread.participantIds.includes(contact.id)) {\n                                    participants.push({\n                                        id: contact.id,\n                                        avatar: contact.avatar,\n                                        lastActivity: contact.lastActivity,\n                                        name: contact.name\n                                    });\n                                }\n                            });\n                        } else {\n                            var contact3 = contacts.find(function(contact) {\n                                return contact.id === threadKey;\n                            });\n                            // If no contact found, the user is trying a shady route\n                            if (!contact3) {\n                                reject(new Error('Unable to find the contact'));\n                                return;\n                            }\n                            participants.push({\n                                id: contact3.id,\n                                avatar: contact3.avatar,\n                                lastActivity: contact3.lastActivity,\n                                name: contact3.name\n                            });\n                        }\n                        return resolve(participants);\n                    } catch (err) {\n                        console.error('[Chat Api]: ', err);\n                        reject(new Error('Internal server error'));\n                    }\n                });\n            }\n        },\n        {\n            key: \"addMessage\",\n            value: function addMessage(param) {\n                var threadId = param.threadId, recipientIds = param.recipientIds, body = param.body;\n                return new Promise(function(resolve, reject) {\n                    try {\n                        if (!(threadId || recipientIds)) {\n                            reject(new Error('Thread ID or recipient IDs has to be provided'));\n                            return;\n                        }\n                        // On server get current identity (user) from the request\n                        var user = {\n                            id: '5e86809283e28b96d2d38537'\n                        };\n                        var thread;\n                        // Try to find the thread\n                        if (threadId) {\n                            thread = findThreadById(threadId);\n                            // If thread ID provided the thread has to exist.\n                            if (!thread) {\n                                reject(new Error('Invalid thread id'));\n                                return;\n                            }\n                        } else {\n                            var participantIds = [\n                                user.id\n                            ].concat(_toConsumableArray(recipientIds || []));\n                            thread = findThreadByParticipantIds(participantIds);\n                        }\n                        // If reached this point, thread will exist if thread ID provided\n                        // For recipient Ids it may or may not exist. If it doesn't, create a new one.\n                        if (!thread) {\n                            var participantIds1 = [\n                                user.id\n                            ].concat(_toConsumableArray(recipientIds || []));\n                            thread = {\n                                id: (0,_utils_create_resource_id__WEBPACK_IMPORTED_MODULE_0__.createResourceId)(),\n                                messages: [],\n                                participantIds: participantIds1,\n                                type: participantIds1.length === 2 ? 'ONE_TO_ONE' : 'GROUP',\n                                unreadCount: 0\n                            };\n                            // Add the new thread to the DB\n                            threads.push(thread);\n                        }\n                        var message = {\n                            id: (0,_utils_create_resource_id__WEBPACK_IMPORTED_MODULE_0__.createResourceId)(),\n                            attachments: [],\n                            body: body,\n                            contentType: 'text',\n                            createdAt: new Date().getTime(),\n                            authorId: user.id\n                        };\n                        thread.messages.push(message);\n                        resolve({\n                            threadId: thread.id,\n                            message: message\n                        });\n                    } catch (err) {\n                        console.error('[Chat Api]: ', err);\n                        reject(new Error('Internal server error'));\n                    }\n                });\n            }\n        }\n    ]);\n    return ChatApi;\n}();\nvar chatApi = new ChatApi();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            var currentExports = module.__proto__.exports;\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/__fake-api__/chat-api.js\n");

/***/ })

});
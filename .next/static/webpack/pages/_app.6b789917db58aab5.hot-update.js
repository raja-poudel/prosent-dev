"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./src/__fake-api__/kanban-api.js":
/*!****************************************!*\
  !*** ./src/__fake-api__/kanban-api.js ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"kanbanApi\": function() { return /* binding */ kanbanApi; }\n/* harmony export */ });\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/esm/index.js\");\n/* harmony import */ var _utils_create_resource_id__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/create-resource-id */ \"./src/utils/create-resource-id.js\");\n/* harmony import */ var _utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/deep-copy */ \"./src/utils/deep-copy.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n// You'll see here that we start with a deep clone of the board.\n// The reason for that is to create a db session wannabe strategy.\n// If something fails, we do not affect the original data until everything worked as expected.\nvar now = new Date();\nvar board = {\n    cards: [\n        {\n            id: '5e849c8708bd72683b454747',\n            attachments: [],\n            checklists: [\n                {\n                    id: '5e84a8175c48d3f5b1d01972',\n                    name: 'Update overview page',\n                    checkItems: [\n                        {\n                            id: '5e85af37da584c5e4bd8a06c',\n                            name: 'Prepare sketch',\n                            state: 'complete'\n                        }\n                    ]\n                }\n            ],\n            comments: [\n                {\n                    id: '15e849c5a35d4dff4f88ebff6',\n                    cardId: '5e849c8708bd72683b454747',\n                    createdAt: (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.subDays)(now, 5).getTime(),\n                    memberId: '5e887ac47eed253091be10cb',\n                    message: 'This is a comment'\n                }\n            ],\n            columnId: '5e849c39325dc5ef58e5a5db',\n            cover: '/assests/mock-images/kanban/media_1.jpg',\n            description: 'Duis condimentum lacus finibus felis pellentesque, ac auctor nibh fermentum. Duis sed dui ante. Phasellus id eros tincidunt, dictum lorem vitae, pellentesque sem. Aenean eu enim sit amet mauris rhoncus mollis. Sed enim turpis, porta a felis et, luctus faucibus nisi. Phasellus et metus fermentum, ultrices arcu aliquam, facilisis justo. Cras nunc nunc, elementum sed euismod ut, maximus eget nibh. Phasellus condimentum lorem neque. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Fusce sagittis pharetra eleifend. Suspendisse potenti.',\n            due: (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.addDays)(now, 7).getTime(),\n            isSubscribed: false,\n            labels: [\n                'Business',\n                'Design'\n            ],\n            memberIds: [\n                '5e86809283e28b96d2d38537'\n            ],\n            name: 'Call with sales of HubSpot'\n        },\n        {\n            id: '5e849c90fabe1f1f4b3557f6',\n            attachments: [],\n            checklists: [],\n            columnId: '5e849c39325dc5ef58e5a5db',\n            comments: [],\n            cover: null,\n            description: 'We are looking for vue experience and of course node js strong knowledge',\n            due: (0,date_fns__WEBPACK_IMPORTED_MODULE_2__.addDays)(now, 6).getTime(),\n            isSubscribed: true,\n            labels: [],\n            memberIds: [\n                '5e887b209c28ac3dd97f6db5',\n                '5e887a62195cc5aef7e8ca5d'\n            ],\n            name: 'Interview for the Asis. Sales Manager'\n        },\n        {\n            id: '5e849c977ef6265938bfd90b',\n            attachments: [],\n            checklists: [],\n            columnId: '5e849c39325dc5ef58e5a5db',\n            comments: [],\n            cover: null,\n            description: 'We need to make it aggressive with pricing because it’s in their interest to acquire us',\n            due: null,\n            isSubscribed: false,\n            labels: [],\n            memberIds: [],\n            name: 'Change the height of the top bar because it looks too chunky'\n        },\n        {\n            id: '5e849c9e34ee93bc7255c599',\n            attachments: [],\n            checklists: [],\n            columnId: '5e849c39325dc5ef58e5a5db',\n            comments: [],\n            cover: null,\n            description: 'We need to make it aggressive with pricing because it’s in their interest to acquire us',\n            due: null,\n            isSubscribed: false,\n            labels: [],\n            memberIds: [\n                '5e887ac47eed253091be10cb',\n                '5e86809283e28b96d2d38537'\n            ],\n            name: 'Integrate Stripe API'\n        },\n        {\n            id: '5e849ca7d063dc3830d4b49c',\n            attachments: [],\n            checklists: [],\n            columnId: '5e849c2b38d238c33e516755',\n            comments: [],\n            cover: null,\n            description: 'We need to make it aggressive with pricing because it’s in their interest to acquire us',\n            due: null,\n            isSubscribed: true,\n            labels: [],\n            memberIds: [\n                '5e887a62195cc5aef7e8ca5d'\n            ],\n            name: 'Update the customer API for payments'\n        },\n        {\n            id: '5e849cb5d0c6e8894451fdfa',\n            attachments: [],\n            checklists: [],\n            columnId: '5e849c2b38d238c33e516755',\n            comments: [],\n            cover: null,\n            description: 'We need to make it aggressive with pricing because it’s in their interest to acquire us',\n            due: null,\n            isSubscribed: true,\n            labels: [],\n            memberIds: [],\n            name: 'Redesign the landing page'\n        }\n    ],\n    columns: [\n        {\n            id: '5e849c39325dc5ef58e5a5db',\n            cardIds: [\n                '5e849c8708bd72683b454747',\n                '5e849c90fabe1f1f4b3557f6',\n                '5e849c977ef6265938bfd90b',\n                '5e849c9e34ee93bc7255c599'\n            ],\n            name: 'Todo'\n        },\n        {\n            id: '5e849c2b38d238c33e516755',\n            cardIds: [\n                '5e849ca7d063dc3830d4b49c',\n                '5e849cb5d0c6e8894451fdfa'\n            ],\n            name: 'Progress'\n        },\n        {\n            id: '5e849c2b38d238c33e5146755',\n            name: 'Done',\n            cardIds: []\n        }\n    ],\n    members: [\n        {\n            id: '5e887a62195cc5aef7e8ca5d',\n            avatar: '/assests/mock-images/avatars/avatar-marcus_finn.png',\n            name: 'Marcus Finn'\n        },\n        {\n            id: '5e887ac47eed253091be10cb',\n            avatar: '/assests/mock-images/avatars/avatar-carson_darrin.png',\n            name: 'Carson Darrin'\n        },\n        {\n            id: '5e887b209c28ac3dd97f6db5',\n            avatar: '/assests/mock-images/avatars/avatar-fran_perez.png',\n            name: 'Fran Perez'\n        },\n        {\n            id: '5e887b7602bdbc4dbb234b27',\n            avatar: '/assests/mock-images/avatars/avatar-jie_yan_song.png',\n            name: 'Jie Yan Song'\n        },\n        {\n            id: '5e86809283e28b96d2d38537',\n            avatar: '/assests/mock-images/avatars/avatar-anika_visser.png',\n            name: 'Anika Visser'\n        }\n    ]\n};\nvar KanbanApi = /*#__PURE__*/ function() {\n    \"use strict\";\n    function KanbanApi() {\n        _classCallCheck(this, KanbanApi);\n    }\n    _createClass(KanbanApi, [\n        {\n            key: \"getBoard\",\n            value: function getBoard() {\n                return Promise.resolve((0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(board));\n            }\n        },\n        {\n            key: \"createColumn\",\n            value: function createColumn(param) {\n                var name = param.name;\n                return new Promise(function(resolve, reject) {\n                    try {\n                        // Make a deep copy\n                        var clonedBoard = (0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(board);\n                        // Create the new column\n                        var column = {\n                            id: (0,_utils_create_resource_id__WEBPACK_IMPORTED_MODULE_0__.createResourceId)(),\n                            name: name,\n                            cardIds: []\n                        };\n                        clonedBoard.columns.push(column);\n                        // Save changes\n                        board = clonedBoard;\n                        resolve((0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(column));\n                    } catch (err) {\n                        console.error('[Kanban Api]: ', err);\n                        reject(new Error('Internal server error'));\n                    }\n                });\n            }\n        },\n        {\n            key: \"updateColumn\",\n            value: function updateColumn(param) {\n                var columnId = param.columnId, update = param.update;\n                return new Promise(function(resolve, reject) {\n                    try {\n                        // Make a deep copy\n                        var clonedBoard = (0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(board);\n                        // Find the column to clear\n                        var column = clonedBoard.columns.find(function(_column) {\n                            return _column.id === columnId;\n                        });\n                        // Update the column\n                        Object.assign(column, update);\n                        // Save changes\n                        board = clonedBoard;\n                        resolve((0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(column));\n                    } catch (err) {\n                        console.error('[Kanban Api]: ', err);\n                        reject(new Error('Internal server error'));\n                    }\n                });\n            }\n        },\n        {\n            key: \"clearColumn\",\n            value: function clearColumn(columnId) {\n                return new Promise(function(resolve, reject) {\n                    try {\n                        // Make a deep copy\n                        var clonedBoard = (0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(board);\n                        // Find the column to clear\n                        var column = clonedBoard.columns.find(function(_column) {\n                            return _column.id === columnId;\n                        });\n                        if (!column) {\n                            reject(new Error('Column not found'));\n                            return;\n                        }\n                        // Remove the cards with columnId reference\n                        clonedBoard.cards = clonedBoard.cards.filter(function(card) {\n                            return card.columnId !== columnId;\n                        });\n                        // Remove all cardIds from the column\n                        column.cardIds = [];\n                        // Save changes\n                        board = clonedBoard;\n                        resolve(true);\n                    } catch (err) {\n                        console.error('[Kanban Api]: ', err);\n                        reject(new Error('Internal server error'));\n                    }\n                });\n            }\n        },\n        {\n            key: \"deleteColumn\",\n            value: function deleteColumn(columnId) {\n                return new Promise(function(resolve, reject) {\n                    try {\n                        // Make a deep copy\n                        var clonedBoard = (0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(board);\n                        // Find the column to remove\n                        var column = clonedBoard.columns.find(function(_column) {\n                            return _column.id === columnId;\n                        });\n                        if (!column) {\n                            reject(new Error('Column not found'));\n                            return;\n                        }\n                        // Remove the cards with columnId reference\n                        clonedBoard.cards = clonedBoard.cards.filter(function(card) {\n                            return card.columnId !== columnId;\n                        });\n                        // Remove the column from the board\n                        clonedBoard.columns = clonedBoard.columns.filter(function(_column) {\n                            return _column.id !== columnId;\n                        });\n                        // Save changes\n                        board = clonedBoard;\n                        resolve(true);\n                    } catch (err) {\n                        console.error('[Kanban Api]: ', err);\n                        reject(new Error('Internal server error'));\n                    }\n                });\n            }\n        },\n        {\n            key: \"createCard\",\n            value: function createCard(param) {\n                var columnId = param.columnId, name = param.name;\n                return new Promise(function(resolve, reject) {\n                    try {\n                        // Make a deep copy\n                        var clonedBoard = (0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(board);\n                        // Find the column where the new card will be added\n                        var column = clonedBoard.columns.find(function(_column) {\n                            return _column.id === columnId;\n                        });\n                        if (!column) {\n                            reject(new Error('Column not found'));\n                            return;\n                        }\n                        // Create the new card\n                        var card = {\n                            id: (0,_utils_create_resource_id__WEBPACK_IMPORTED_MODULE_0__.createResourceId)(),\n                            attachments: [],\n                            checklists: [],\n                            columnId: columnId,\n                            comments: [],\n                            cover: null,\n                            description: null,\n                            due: null,\n                            isSubscribed: false,\n                            labels: [],\n                            memberIds: [],\n                            name: name\n                        };\n                        // Add the new card\n                        clonedBoard.cards.push(card);\n                        // Add the cardId reference to the column\n                        column.cardIds.push(card.id);\n                        // Save changes\n                        board = clonedBoard;\n                        resolve((0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(card));\n                    } catch (err) {\n                        console.error('[Kanban Api]: ', err);\n                        reject(new Error('Internal server error'));\n                    }\n                });\n            }\n        },\n        {\n            key: \"updateCard\",\n            value: function updateCard(param) {\n                var cardId = param.cardId, update = param.update;\n                return new Promise(function(resolve, reject) {\n                    try {\n                        // Make a deep copy\n                        var clonedBoard = (0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(board);\n                        // Find the card that will be updated\n                        var card = clonedBoard.cards.find(function(_card) {\n                            return _card.id === cardId;\n                        });\n                        if (!card) {\n                            reject(new Error('Card not found'));\n                            return;\n                        }\n                        // Update the card\n                        Object.assign(card, update);\n                        // Save changes\n                        board = clonedBoard;\n                        resolve((0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(card));\n                    } catch (err) {\n                        console.error('[Kanban Api]: ', err);\n                        reject(new Error('Internal server error'));\n                    }\n                });\n            }\n        },\n        {\n            key: \"moveCard\",\n            value: function moveCard(param) {\n                var cardId = param.cardId, position = param.position, columnId = param.columnId;\n                return new Promise(function(resolve, reject) {\n                    try {\n                        // Make a deep copy\n                        var clonedBoard = (0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(board);\n                        // Find the card that will be moved\n                        var card = clonedBoard.cards.find(function(_card) {\n                            return _card.id === cardId;\n                        });\n                        if (!card) {\n                            reject(new Error('Card not found'));\n                            return;\n                        }\n                        // Find the source column of the card\n                        var sourceList = clonedBoard.columns.find(function(column) {\n                            return column.id === card.columnId;\n                        });\n                        if (!sourceList) {\n                            reject(new Error('Column not found'));\n                            return;\n                        }\n                        // Remove the cardId reference from the source list\n                        sourceList.cardIds = sourceList.cardIds.filter(function(_cardId) {\n                            return _cardId !== cardId;\n                        });\n                        if (columnId) {\n                            // Find the destination column for the card\n                            var destinationList = clonedBoard.columns.find(function(column) {\n                                return column.id === columnId;\n                            });\n                            if (!destinationList) {\n                                reject(new Error('Column not found'));\n                                return;\n                            }\n                            // Add the cardId reference to the destination list\n                            destinationList.cardIds.splice(position, 0, card.id);\n                            // Store the new columnId reference\n                            card.columnId = destinationList.id;\n                        } else {\n                            // If columnId is not provided, it means that we move the card in the same list\n                            sourceList.cardIds.splice(position, 0, card.id);\n                        }\n                        // Save changes\n                        board = clonedBoard;\n                        resolve(true);\n                    } catch (err) {\n                        console.error('[Kanban Api]: ', err);\n                        reject(new Error('Internal server error'));\n                    }\n                });\n            }\n        },\n        {\n            key: \"deleteCard\",\n            value: function deleteCard(cardId) {\n                return new Promise(function(resolve, reject) {\n                    try {\n                        // Make a deep copy\n                        var clonedBoard = (0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(board);\n                        // Find the card that will be removed\n                        var card = clonedBoard.cards.find(function(_card) {\n                            return _card.id === cardId;\n                        });\n                        if (!card) {\n                            reject(new Error('Card not found'));\n                            return;\n                        }\n                        // Remove the card from board\n                        clonedBoard.cards = clonedBoard.cards.filter(function(_card) {\n                            return _card.id !== cardId;\n                        });\n                        // Find the column using the columnId reference\n                        var column = clonedBoard.columns.find(function(_column) {\n                            return _column.id === card.columnId;\n                        });\n                        // If for some reason it does not exist, there's no problem. Maybe something broke before.\n                        if (column) {\n                            column.cardIds = column.cardIds.filter(function(_cardId) {\n                                return _cardId !== cardId;\n                            });\n                        }\n                        // Save changes\n                        board = clonedBoard;\n                        resolve(true);\n                    } catch (err) {\n                        console.error('[Kanban Api]: ', err);\n                        reject(new Error('Internal server error'));\n                    }\n                });\n            }\n        },\n        {\n            key: \"addComment\",\n            value: function addComment(param) {\n                var cardId = param.cardId, message = param.message;\n                return new Promise(function(resolve, reject) {\n                    try {\n                        // Make a deep copy\n                        var clonedBoard = (0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(board);\n                        // Find the card where the comment will be added\n                        var card = clonedBoard.cards.find(function(_card) {\n                            return _card.id === cardId;\n                        });\n                        if (!card) {\n                            reject(new Error('Card not found'));\n                            return;\n                        }\n                        // Create the new comment\n                        // Important: On server get memberId from request identity (user)\n                        var comment = {\n                            id: (0,_utils_create_resource_id__WEBPACK_IMPORTED_MODULE_0__.createResourceId)(),\n                            cardId: cardId,\n                            createdAt: now.getTime(),\n                            memberId: '5e86809283e28b96d2d38537',\n                            message: message\n                        };\n                        // Add the new comment to card\n                        card.comments.push(comment);\n                        // Save changes\n                        board = clonedBoard;\n                        resolve((0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(comment));\n                    } catch (err) {\n                        console.error('[Kanban Api]: ', err);\n                        reject(new Error('Internal server error'));\n                    }\n                });\n            }\n        },\n        {\n            key: \"addChecklist\",\n            value: function addChecklist(param) {\n                var cardId = param.cardId, name = param.name;\n                return new Promise(function(resolve, reject) {\n                    try {\n                        // Make a deep copy\n                        var clonedBoard = (0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(board);\n                        // Find the card where the checklist will be added\n                        var card = clonedBoard.cards.find(function(_card) {\n                            return _card.id === cardId;\n                        });\n                        if (!card) {\n                            reject(new Error('Card not found'));\n                            return;\n                        }\n                        // Create the new checklist\n                        var checklist = {\n                            id: (0,_utils_create_resource_id__WEBPACK_IMPORTED_MODULE_0__.createResourceId)(),\n                            name: name,\n                            checkItems: []\n                        };\n                        // Add the new checklist to card\n                        card.checklists.push(checklist);\n                        // Save changes\n                        board = clonedBoard;\n                        resolve((0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(checklist));\n                    } catch (err) {\n                        console.error('[Kanban Api]: ', err);\n                        reject(new Error('Internal server error'));\n                    }\n                });\n            }\n        },\n        {\n            key: \"updateChecklist\",\n            value: function updateChecklist(param) {\n                var cardId = param.cardId, checklistId = param.checklistId, update = param.update;\n                return new Promise(function(resolve, reject) {\n                    try {\n                        // Make a deep copy\n                        var clonedBoard = (0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(board);\n                        // Find the card that contains the checklist that will be updated\n                        var card = clonedBoard.cards.find(function(_card) {\n                            return _card.id === cardId;\n                        });\n                        if (!card) {\n                            reject(new Error('Card not found'));\n                            return;\n                        }\n                        // Find the checklist that will be updated\n                        var checklist = card.checklists.find(function(_checklist) {\n                            return _checklist.id === checklistId;\n                        });\n                        if (!checklist) {\n                            reject(new Error('Checklist not found'));\n                            return;\n                        }\n                        // Update the checklist\n                        Object.assign(checklist, update);\n                        // Save changes\n                        board = clonedBoard;\n                        resolve((0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(checklist));\n                    } catch (err) {\n                        console.error('[Kanban Api]: ', err);\n                        reject(new Error('Internal server error'));\n                    }\n                });\n            }\n        },\n        {\n            key: \"deleteChecklist\",\n            value: function deleteChecklist(param) {\n                var cardId = param.cardId, checklistId = param.checklistId;\n                return new Promise(function(resolve, reject) {\n                    try {\n                        // Make a deep copy\n                        var clonedBoard = (0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(board);\n                        // Find the card that contains the checklist that will be removed\n                        var card = clonedBoard.cards.find(function(_card) {\n                            return _card.id === cardId;\n                        });\n                        if (!card) {\n                            reject(new Error('Card not found'));\n                            return;\n                        }\n                        // Remove the checklist from the card\n                        card.checklists = card.checklists.filter(function(checklists) {\n                            return checklists.id !== checklistId;\n                        });\n                        // Save changes\n                        board = clonedBoard;\n                        resolve(true);\n                    } catch (err) {\n                        console.error('[Kanban Api]: ', err);\n                        reject(new Error('Internal server error'));\n                    }\n                });\n            }\n        },\n        {\n            key: \"addCheckItem\",\n            value: function addCheckItem(param) {\n                var cardId = param.cardId, checklistId = param.checklistId, name = param.name;\n                return new Promise(function(resolve, reject) {\n                    try {\n                        // Make a deep copy\n                        var clonedBoard = (0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(board);\n                        // Find the card where the checklist will be added\n                        var card = clonedBoard.cards.find(function(_card) {\n                            return _card.id === cardId;\n                        });\n                        if (!card) {\n                            reject(new Error('Card not found'));\n                            return;\n                        }\n                        // Find the checklist where the check item will be added\n                        var checklist = card.checklists.find(function(_checklist) {\n                            return _checklist.id === checklistId;\n                        });\n                        if (!checklist) {\n                            reject(new Error('Checklist not found'));\n                            return;\n                        }\n                        // Create the new check item\n                        var checkItem = {\n                            id: (0,_utils_create_resource_id__WEBPACK_IMPORTED_MODULE_0__.createResourceId)(),\n                            checklistId: checklistId,\n                            name: name,\n                            state: 'incomplete'\n                        };\n                        // Add the check item to the checklist\n                        checklist.checkItems.push(checkItem);\n                        // Save changes\n                        board = clonedBoard;\n                        resolve((0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(checkItem));\n                    } catch (err) {\n                        console.error('[Kanban Api]: ', err);\n                        reject(new Error('Internal server error'));\n                    }\n                });\n            }\n        },\n        {\n            key: \"updateCheckItem\",\n            value: function updateCheckItem(param) {\n                var cardId = param.cardId, checklistId = param.checklistId, checkItemId = param.checkItemId, update = param.update;\n                return new Promise(function(resolve, reject) {\n                    try {\n                        // Make a deep copy\n                        var clonedBoard = (0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(board);\n                        // Find the card where the checklist will be added\n                        var card = clonedBoard.cards.find(function(_card) {\n                            return _card.id === cardId;\n                        });\n                        if (!card) {\n                            reject(new Error('Card not found'));\n                            return;\n                        }\n                        // Find the checklist where the check item will be updated\n                        var checklist = card.checklists.find(function(_checklist) {\n                            return _checklist.id === checklistId;\n                        });\n                        if (!checklist) {\n                            reject(new Error('Checklist not found'));\n                            return;\n                        }\n                        // Find the checklist where the check item will be updated\n                        var checkItem = checklist.checkItems.find(function(_checkItem) {\n                            return _checkItem.id === checkItemId;\n                        });\n                        if (!checkItem) {\n                            reject(new Error('Check item not found'));\n                            return;\n                        }\n                        // Update the check item\n                        Object.assign(checkItem, update);\n                        // Save changes\n                        board = clonedBoard;\n                        resolve((0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(checkItem));\n                    } catch (err) {\n                        console.error('[Kanban Api]: ', err);\n                        reject(new Error('Internal server error'));\n                    }\n                });\n            }\n        },\n        {\n            key: \"deleteCheckItem\",\n            value: function deleteCheckItem(param) {\n                var cardId = param.cardId, checklistId = param.checklistId, checkItemId = param.checkItemId;\n                return new Promise(function(resolve, reject) {\n                    try {\n                        // Make a deep copy\n                        var clonedBoard = (0,_utils_deep_copy__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(board);\n                        // Find the card that contains the checklist that contains the check item that will be removed\n                        var card = clonedBoard.cards.find(function(_card) {\n                            return _card.id === cardId;\n                        });\n                        if (!card) {\n                            reject(new Error('Card not found'));\n                            return;\n                        }\n                        // Find the checklist where the check item will be updated\n                        var checklist = card.checklists.find(function(_checklist) {\n                            return _checklist.id === checklistId;\n                        });\n                        if (!checklist) {\n                            reject(new Error('Checklist not found'));\n                            return;\n                        }\n                        // Remove the check item from the checklist\n                        checklist.checkItems = checklist.checkItems.filter(function(checkItem) {\n                            return checkItem.id !== checkItemId;\n                        });\n                        // Save changes\n                        board = clonedBoard;\n                        resolve(true);\n                    } catch (err) {\n                        console.error('[Kanban Api]: ', err);\n                        reject(new Error('Internal server error'));\n                    }\n                });\n            }\n        }\n    ]);\n    return KanbanApi;\n}();\nvar kanbanApi = new KanbanApi();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            var currentExports = module.__proto__.exports;\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/__fake-api__/kanban-api.js\n");

/***/ })

});